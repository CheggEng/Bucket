{
    "project": {
        "name": "jStore",
        "description": "Cross browser/Platform local local storage mechanism",
        "version": "0.0.1",
        "url": "http://example.com/"
    },
    "files": {
        "src/Events/Events.js": {
            "name": "src/Events/Events.js",
            "modules": {
                "Events": 1
            },
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/common/Error.js": {
            "name": "src/common/Error.js",
            "modules": {
                "Helper": 1
            },
            "classes": {
                "Error": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/common/Logger.js": {
            "name": "src/common/Logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/common/utils.js": {
            "name": "src/common/utils.js",
            "modules": {},
            "classes": {
                "utils.Bind": 1,
                "utils.Options": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/drivers/DomStorage.js": {
            "name": "src/drivers/DomStorage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/drivers/Driver.js": {
            "name": "src/drivers/Driver.js",
            "modules": {
                "Driver": 1
            },
            "classes": {
                "Driver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/drivers/InMemory.js": {
            "name": "src/drivers/InMemory.js",
            "modules": {},
            "classes": {
                "InMemory": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Events": {
            "name": "Events",
            "submodules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Events/Events.js",
            "line": 124
        },
        "Helper": {
            "name": "Helper",
            "submodules": {},
            "classes": {
                "Error": 1,
                "utils.Bind": 1,
                "utils.Options": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/common/utils.js",
            "line": 28
        },
        "Driver": {
            "name": "Driver",
            "submodules": {},
            "classes": {
                "InMemory": 1,
                "Driver": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/drivers/Driver.js",
            "line": 12
        }
    },
    "classes": {
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Events",
            "namespace": "",
            "file": "src/Events/Events.js",
            "line": 124,
            "description": "Events Provider.\n\nCan function either as a standalone or a Mixin",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "element to use as event target. Optional",
                    "type": "Element"
                }
            ]
        },
        "Error": {
            "name": "Error",
            "shortname": "Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "src/common/Error.js",
            "line": 5
        },
        "utils.Bind": {
            "name": "utils.Bind",
            "shortname": "utils.Bind",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "src/common/utils.js",
            "line": 5,
            "description": "generates a bound function collection, using an object's bind array propery",
            "is_constructor": 1
        },
        "utils.Options": {
            "name": "utils.Options",
            "shortname": "utils.Options",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "src/common/utils.js",
            "line": 28,
            "description": "A simple mixin for managing an options argument. Mixin uses the defaultOptions property to identify default options.\nMixin also automatically identify on* properties as events and assigns them",
            "is_constructor": 1
        },
        "InMemory": {
            "name": "InMemory",
            "shortname": "InMemory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Driver",
            "namespace": "",
            "file": "src/drivers/InMemory.js",
            "line": 7,
            "description": "This class is the implementation of InMemory storage.<br/>\nThe InMemory storage store all the data as Object (JSON) as key:value.<br/>\n<br/>\n\nTODO: Right now we have unknown memory limitation<br/>",
            "is_constructor": 1,
            "extends": "Driver"
        },
        "Driver": {
            "name": "Driver",
            "shortname": "Driver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Driver",
            "namespace": "",
            "file": "src/drivers/Driver.js",
            "line": 12,
            "description": "This is the skeleton Driver class.<br/>\nThe class will be used as teh base class for all the drivers implementation.<br/>\nHere we define the API for the drivers<br/>",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/Events/Events.js",
            "line": 35,
            "description": "removes the on* prefix from event names",
            "itemtype": "method",
            "name": "Events.removeOn",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 50,
            "description": "returns a structured data object about a type's pseudo-events",
            "itemtype": "method",
            "name": "getPseudo",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 73,
            "description": "proccesses an event type, returning a valid data object from that name",
            "itemtype": "method",
            "name": "processType",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 87,
            "description": "cross-browser function to create event object for fire method\n\nCreated object will always have following properties:\n - dispatcher: a reference to dispatching object (since we can't use 'this')\n - args: arguments passed alongside the event\n - object_event: a flag set to true to easily check if this is an object event or a normal DOM event.",
            "itemtype": "method",
            "name": "Events.createEvent",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dispatcher",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "event object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 276,
            "description": "Adds an event",
            "itemtype": "method",
            "name": "addEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 306,
            "description": "Helper to add multiple events at once",
            "itemtype": "method",
            "name": "addEvents",
            "params": [
                {
                    "name": "literal",
                    "description": "object of event types => callbacks",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 325,
            "description": "dispatches an event",
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 364,
            "description": "removes a function from an event",
            "itemtype": "method",
            "name": "removeEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "to remove from stack",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 387,
            "description": "Adds an event for one execution, then removes it",
            "itemtype": "method",
            "name": "addEventOnce",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events/Events.js",
            "line": 409,
            "description": "Fires a latched event",
            "itemtype": "method",
            "name": "fireLatchedEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/common/Logger.js",
            "line": 69,
            "description": "Logger Class.\nCreates a logger.",
            "params": [
                {
                    "name": "loggerName",
                    "description": "Name of the logger. If a logger with supplied name\nalready exists, that logger instance is returned and its level will be updated\nto a passed level or will stay with old level if level parameter wasn't passed.",
                    "type": "String"
                },
                {
                    "name": "level",
                    "description": "Debug level of the logger.",
                    "type": "Logger.logLevels ENUM"
                }
            ],
            "class": "utils.Bind",
            "module": "Helper"
        },
        {
            "file": "src/common/utils.js",
            "line": 13,
            "description": "holds the generated bound function collection",
            "itemtype": "property",
            "name": "bound",
            "access": "protected",
            "tagname": "",
            "type": "object",
            "class": "utils.Bind",
            "module": "Helper"
        },
        {
            "file": "src/common/utils.js",
            "line": 44,
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "utils.Options",
            "module": "Helper"
        },
        {
            "file": "src/common/utils.js",
            "line": 60,
            "description": "this property will be used to identify default options",
            "itemtype": "property",
            "name": "defaultOptions",
            "access": "protected",
            "tagname": "",
            "class": "utils.Options",
            "module": "Helper"
        },
        {
            "file": "src/common/utils.js",
            "line": 67,
            "description": "this method acts like merge, only that it only merges properties of the original object\n\n_Creates a new object rather than actually merge_",
            "itemtype": "method",
            "name": "setOptions",
            "static": 1,
            "params": [
                {
                    "name": "defaults",
                    "description": "a map of default properties",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "a map of values to merge",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "new merged object",
                "type": "Object"
            },
            "class": "utils.Options",
            "module": "Helper"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 35,
            "description": "The driver name.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 43,
            "description": "Delete all the records from the storage\n\n<pre><code>\n  clear(function callback(Error|null))\n  </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "callback",
                    "description": "- A callback function that will be invoked after the clear.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 61,
            "description": "Run the callback method on all the storage items.\n\n<pre><code>\n  each(function callback(Error|null, String key, String value)\n  </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "- A callback function that will handle the results.\n                             The callback parameters are (key, value)",
                    "type": "Function"
                }
            ],
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 80,
            "description": "Check to see if the given key already exist in the Storage\n<pre><code>\n  exists(String key, function callback(Error|null, boolean)\n</code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "key",
                    "description": "- The key of the item we want to check if exits",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- A callback function that will handle the results.\n                             The callback parameters are (key, value)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "exists - true/false if the key exists or not",
                "type": "Boolean"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 101,
            "description": "Retrieve item or items from the storage.\n\n<pre><code>\n  get(String|Array, function callback(Error|null, [String key, String value] | Object)  - fetch single/multiple record\n</code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "- The key of the item we want to retrieve",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "keys",
                    "description": "- Array with the keys that we want to fetch",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "- A callback function that will handle the results.\n                             The callback parameters are (String, String|Array) based upon the arguments passed to the function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "if was asked for a collection of values, return a map, otherwise return a string",
                "type": "String|Object"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 127,
            "description": "get all items.\n\n<pre><code>\n  getAll(function callback(Error|null, Object records))\n    </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "callback",
                    "description": "- A callback function for processing the records",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "key=>value map",
                "type": "Object"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 146,
            "description": "get all keys.\n\n<pre><code>\n  getKeys(function callback(Error|null, Array keys))\n    </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "getKeys",
            "params": [
                {
                    "name": "callback",
                    "description": "- A callback function for processing the keys",
                    "type": "Function"
                }
            ],
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 164,
            "description": "This method will be init the Driver.\n\nAny initialization code should be place here",
            "itemtype": "method",
            "name": "init",
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 174,
            "description": "Remove items from the storage\n\n<pre><code>\n  remove(String|Array [, function(Error|null)]) - remove the given key(s) from the storage\n    </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key/keys",
                    "description": "- The key(s) of the item we want to remove",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "optional",
                    "description": "",
                    "type": "Callback",
                    "optional": true
                }
            ],
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 193,
            "description": "Add a new item(s) to the storage.\nIf the key is already in the store it will be updated.\nThe method accept <b>any</b> of the following:\n\n<pre><code>\n    set([String, String] |Map)\n    </code>\n</pre>",
            "async": 1,
            "chainable": 1,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "{[String,",
                    "description": "String] |Object) - Simple key & value pair or map of key values pairs"
                }
            ],
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 214,
            "description": "Test method to check if this driver is suitable for this browser/device\n\n<pre><code>\n    test()\n    </code>\n</pre>",
            "return": {
                "description": "boolean"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 229,
            "description": "List of registered drivers",
            "static": 1,
            "itemtype": "property",
            "name": "drivers",
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 238,
            "description": "Registers a driver.<br/>\nA driver must always have a <b>test</b> method<br/>",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "a list of methods and properties for the new driver",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the new driver",
                "type": "Driver"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/Driver.js",
            "line": 274,
            "description": "chooses which driver to use and creates it",
            "itemtype": "method",
            "name": "choose",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "options to pass to the driver's constructor\n\nIf we pass on a list of preferred drivers we test them in the given order\noptions:{\n    drivers:[\n     'InMemory',\n     'DomStorage'\n    ]\n}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the chosen driver",
                "type": "Driver"
            },
            "class": "Driver",
            "module": "Driver"
        },
        {
            "file": "src/drivers/InMemory.js",
            "line": 20,
            "description": "The InMemory storage use Object (JSON) to store all the data.<br/>",
            "itemtype": "property",
            "name": "this._storage",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "InMemory",
            "module": "Driver"
        }
    ]
}