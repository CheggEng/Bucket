{"name":"Bucket","tagline":"A Cross Browser javascript storage API","body":"Bucket.js\r\n========\r\n\r\nBucket is a cross-browser client-side database solution. Bucket currently supports IndexedDB, WebSQL, and LocalStorage.\r\nBucket was developed by Chegg ME team, and is used heavily in Chegg's eReader.\r\n\r\nCreating a bucket instance is dead-simple -\r\n\r\n```js\r\nvar storage = new Bucket({\r\n    driver_options : {\r\n        table : 'foo'\r\n    },\r\n    drivers : ['IndexedDB'],\r\n    onLoad : function(){},\r\n    onError :function(){}\r\n});\r\n```\r\n\r\nFor an extended parameter list, see [docs](http://cheggeng.github.com/Bucket/docs/index.html).\r\n\r\nBy default, bucket chooses the 1st usable driver in it's list (if no driver list was provided to the constructor). This means\r\nthat the easiest way to set application-wide driver prioritization is simply to control the order in which drivers are defined.\r\nHowever, you can also specify which drivers you want the instance to use (and in which order) by specifying a driver list in\r\nthe parameters.\r\n\r\n## Methods\r\n\r\nAll methods are async, and always receive a callback as the last parameter.\r\nBucket follows the Node.js pattern, where the 1st parameter of a callback is an error object (or `null` in case no error was generated).\r\n\r\n### Bucket.set\r\n\r\n```js\r\n//singular\r\nstorage.set('a','b');\r\n\r\n//plural\r\nstorage.set({\r\n    'arieh' : 'glazer',\r\n    'roded' : 'conforty'\r\n});\r\n```\r\n\r\n### Bucket.get\r\n\r\n```js\r\n//singular\r\nstorage.get('a', function(err,value){\r\n    console.log(value);\r\n});\r\n\r\n//plural\r\nstorage.get(['arieh','roded'], function(err,values){\r\n    console.log(values); //{arieh:'glazer', roded:'conforty'}\r\n});\r\n```\r\n### Bucket.remove\r\n\r\n```js\r\n//singular\r\nstorage.remove('a');\r\n\r\n//plural\r\nstorage.remove(['a','arieh']);\r\n```\r\n\r\n### Bucket.exists\r\n\r\n```js\r\nstorage.exists('arieh', function(err, ex){\r\n    console.log(ex);\r\n});\r\n```\r\n\r\n### Bucket.each\r\n\r\n```js\r\nstorage.each(function(err, key, value){\r\n    console.log(key, value);\r\n});\r\n```\r\n\r\n### Bucket.getAll\r\n\r\n```js\r\nstorage.getAll(function(err,map){\r\n    //key value map\r\n});\r\n```\r\n\r\n### Bucket.getKeys\r\n\r\n```js\r\nstorage.getKeys(function(err, keys){\r\n    //array of keys\r\n});\r\n```\r\n\r\n### Bucket.getLength\r\n\r\n```js\r\nstorage.getLength(function(err, len){});\r\n```\r\n\r\n### Bucket.clear\r\n```js\r\nstorage.clear();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}